{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About Django Front End Validators allows you to reuse server-side model field validators to perform front end form validation in JavaScript. For more information, see How It Works . Quickstart Install Django Front End Validators pip install django-front-end-validators Update INSTALLED_APPS INSTALLED_APPS = ( ... 'front_end_validators' , ... ) Configure settings # The directory into which Transcrypt transpiles JS STATICFILES_DIRS = [ # Transcrypt 3.7: 'your_project/__target__' # Transcrypt 3.6: 'your_project/__javascript__' , ] # The path to your validators.py file VALIDATORS_FILE = os . path . join ( BASE_DIR , 'your_project/validators.py' ) Add template tag {% load front_end_validators %}<!doctype html> < html > < head > {{ form.media.css }} </ head > < body > {% block content %}{% endblock %} {% front_end_validators_js %} {{ form.media.js }} </ body > </ html > Transpile validators ./manage.py transpile_validators Write forms from front_end_validators.forms import FrontEndValidatorsModelForm from .models import YourModel class YourModelForm ( FrontEndValidatorsModelForm ): class Meta : model = YourModel fields = '__all__' Running Tests Does the code actually work? source <YOURVIRTUALENV>/bin/activate ( myenv ) $ pip install tox ( myenv ) $ tox","title":"Home"},{"location":"#about","text":"Django Front End Validators allows you to reuse server-side model field validators to perform front end form validation in JavaScript. For more information, see How It Works .","title":"About"},{"location":"#quickstart","text":"","title":"Quickstart"},{"location":"#install-django-front-end-validators","text":"pip install django-front-end-validators","title":"Install Django Front End Validators"},{"location":"#update-installed_apps","text":"INSTALLED_APPS = ( ... 'front_end_validators' , ... )","title":"Update INSTALLED_APPS"},{"location":"#configure-settings","text":"# The directory into which Transcrypt transpiles JS STATICFILES_DIRS = [ # Transcrypt 3.7: 'your_project/__target__' # Transcrypt 3.6: 'your_project/__javascript__' , ] # The path to your validators.py file VALIDATORS_FILE = os . path . join ( BASE_DIR , 'your_project/validators.py' )","title":"Configure settings"},{"location":"#add-template-tag","text":"{% load front_end_validators %}<!doctype html> < html > < head > {{ form.media.css }} </ head > < body > {% block content %}{% endblock %} {% front_end_validators_js %} {{ form.media.js }} </ body > </ html >","title":"Add template tag"},{"location":"#transpile-validators","text":"./manage.py transpile_validators","title":"Transpile validators"},{"location":"#write-forms","text":"from front_end_validators.forms import FrontEndValidatorsModelForm from .models import YourModel class YourModelForm ( FrontEndValidatorsModelForm ): class Meta : model = YourModel fields = '__all__'","title":"Write forms"},{"location":"#running-tests","text":"Does the code actually work? source <YOURVIRTUALENV>/bin/activate ( myenv ) $ pip install tox ( myenv ) $ tox","title":"Running Tests"},{"location":"browser_support/","text":"Because this package uses Transcrypt to transpile Python to JavaScript, browser support depends on the version of Transcrypt installed in your project. Currently this package supports Transcrypt versions 3.6 and 3.7, which transpile Python code into different versions of JavaScript: Transcrypt Version JavaScript Version Browser Support 3.6 ES5 100% 3.7 ES6 >75% Note This plugin will respect whether you have Transcrypt 3.6 or 3.7 installed, so you can choose whether to generate newer or better-supported JavaScript by specifying the Transcrypt version in your project's requirements.","title":"Browser Support"},{"location":"example_project/","text":"An example project is included in the repo's example directory. Set-up To run the example project: # Enter the example directory cd example # Install the dependencies (in a virtual environment, ideally) pip install -r requirements.txt # Transpile the validators from Python to JavaScript ./manage.py transpile_validators # Run the server ./manage.py runserver Visit http://127.0.0.1:8000 in your browser to view a form with a number of validator functions. Demo","title":"Example Project"},{"location":"example_project/#set-up","text":"To run the example project: # Enter the example directory cd example # Install the dependencies (in a virtual environment, ideally) pip install -r requirements.txt # Transpile the validators from Python to JavaScript ./manage.py transpile_validators # Run the server ./manage.py runserver Visit http://127.0.0.1:8000 in your browser to view a form with a number of validator functions.","title":"Set-up"},{"location":"example_project/#demo","text":"","title":"Demo"},{"location":"forms/","text":"FrontEndValidatorsModelForm This class extends Django's ModelForm to add a data-validators attribute to any field that contains validators. data-validators lists references to JavaScript validator functions.","title":"Forms"},{"location":"forms/#frontendvalidatorsmodelform","text":"This class extends Django's ModelForm to add a data-validators attribute to any field that contains validators. data-validators lists references to JavaScript validator functions.","title":"FrontEndValidatorsModelForm"},{"location":"how_it_works/","text":"Django Front End Validators validates your form inputs as-you-type using the same validation logic specified in your model field's validators . It plays nicely with native HTML5 input validation, too. The heavy lifting of converting model field validators from Python to JavaScript is performed by Transcrypt using the transpile_validators managment command . Example Let's say you've got this validator on a field called email : from django.core.exceptions import ValidationError def validate_no_gmail_siblings ( value ): if '+' in value and value . endswith ( 'gmail.com' ): raise ValidationError ( \"Please use your plain Gmail address\" ) When the field is rendered in a FrontEndValidatorsModelForm , it will look like this: < input type = \"email\" name = \"email\" data-validators = \"[validators.validate_no_gmail_siblings]\" > A JavaScript plugin included with the {% front_end_validators_js %} template tag checks the input value against the validators listed in data-validators in an oninput event listener, providing real-time feedback. If the value fails the validators.validate_no_gmail_siblings check, a custom validation error message is added to the field using the HTML5 Constraint API . This prevents the form from being submitted until the validation error is fixed:","title":"How It Works"},{"location":"how_it_works/#example","text":"Let's say you've got this validator on a field called email : from django.core.exceptions import ValidationError def validate_no_gmail_siblings ( value ): if '+' in value and value . endswith ( 'gmail.com' ): raise ValidationError ( \"Please use your plain Gmail address\" ) When the field is rendered in a FrontEndValidatorsModelForm , it will look like this: < input type = \"email\" name = \"email\" data-validators = \"[validators.validate_no_gmail_siblings]\" > A JavaScript plugin included with the {% front_end_validators_js %} template tag checks the input value against the validators listed in data-validators in an oninput event listener, providing real-time feedback. If the value fails the validators.validate_no_gmail_siblings check, a custom validation error message is added to the field using the HTML5 Constraint API . This prevents the form from being submitted until the validation error is fixed:","title":"Example"},{"location":"limitations/","text":"Only function-style validators Although Django supports both class-based and function validators , this package supports only validators written as functions. If supporting class-based validators is important to you, please open an issue . No i18n Because the transpiled JavaScript runs in the browser, it doesn't have direct access to the database or filesystem. If you know of a way to get this to work, please open a pull request ! Example The Django validators documentation gives this as en example ValidationError : from django.core.exceptions import ValidationError from django.utils.translation import gettext_lazy as _ def validate_even ( value ): if value % 2 != 0 : raise ValidationError ( _ ( ' %(value)s is not an even number' ), params = { 'value' : value }, ) After removing ugettext_lazy , we get a validator that will work on the front end: from django.core.exceptions import ValidationError def validate_even ( value ): if value % 2 != 0 : raise ValidationError ( ' %(value)s is not an even number' , params = { 'value' : value }, )","title":"Limitations"},{"location":"limitations/#only-function-style-validators","text":"Although Django supports both class-based and function validators , this package supports only validators written as functions. If supporting class-based validators is important to you, please open an issue .","title":"Only function-style validators"},{"location":"limitations/#no-i18n","text":"Because the transpiled JavaScript runs in the browser, it doesn't have direct access to the database or filesystem. If you know of a way to get this to work, please open a pull request !","title":"No i18n"},{"location":"limitations/#example","text":"The Django validators documentation gives this as en example ValidationError : from django.core.exceptions import ValidationError from django.utils.translation import gettext_lazy as _ def validate_even ( value ): if value % 2 != 0 : raise ValidationError ( _ ( ' %(value)s is not an even number' ), params = { 'value' : value }, ) After removing ugettext_lazy , we get a validator that will work on the front end: from django.core.exceptions import ValidationError def validate_even ( value ): if value % 2 != 0 : raise ValidationError ( ' %(value)s is not an even number' , params = { 'value' : value }, )","title":"Example"},{"location":"management_commands/","text":"transpile_validators This management command uses Transcrypt to convert your project's validators.py file from Python to JavaScript. The transpiled JavaScript is placed in alongside your validators.py file in the following directory: Transcrypt Version Output Directory 3.6 __javascript__ 3.7 __target__ Info The relevant directory should be added to your project's STATICFILES_DIRS settings.","title":"Management Commands"},{"location":"management_commands/#transpile_validators","text":"This management command uses Transcrypt to convert your project's validators.py file from Python to JavaScript. The transpiled JavaScript is placed in alongside your validators.py file in the following directory: Transcrypt Version Output Directory 3.6 __javascript__ 3.7 __target__ Info The relevant directory should be added to your project's STATICFILES_DIRS settings.","title":"transpile_validators"},{"location":"template_tags/","text":"{% front_end_validators_js %} This template tag includes two pieces of JavaScript: JavaScript file Description front_end_validators.js Form logic tying validation functions to input fields using the HTML5 Constraint API validators.[min.]js Transpiled validator functions","title":"Template Tags"},{"location":"template_tags/#front_end_validators_js","text":"This template tag includes two pieces of JavaScript: JavaScript file Description front_end_validators.js Form logic tying validation functions to input fields using the HTML5 Constraint API validators.[min.]js Transpiled validator functions","title":"{% front_end_validators_js %}"}]}